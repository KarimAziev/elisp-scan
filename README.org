* elisp-scan

Find unused code in Emacs Lisp files.

** Requirements

- Emacs 28.1
- ivy (optional)

** Installation

*** with straight-use-package

Put the following in your init file:

#+begin_src elisp
(use-package elisp-scan
  :straight (elisp-scan
             :type git
             :host github
             :repo "KarimAziev/elisp-scan")
  :commands (elisp-scan-query-remove-unused
             elisp-scan-all-unused-defs
             elisp-scan-current-file
             elisp-scan-ivy-read-unused-items)
  :bind ((:map elisp-scan-ivy-map
               ("C-c C-d" . elisp-scan-ivy-remove-item))))
#+end_src

*** Manual

Or download repository and add it to your ~load-path~.

#+begin_src elisp

(add-to-list 'load-path "/path/to/elisp-scan/")

(require 'elisp-scan)
#+end_src
** Usage

The simplest usage is to invoke transient popup ~M-x elisp-scan-transient~ with next commands:

+ ~elisp-scan-current-file~
Show unused items in the current file.
+ ~elisp-scan-report-project-refs~
Scan project files for symbols, used in other files and print report.
+ ~elisp-scan-find-file-dependents~  (file)
Scan =file= for symbols, used in other files and print report.
+ ~elisp-scan-ivy-read-unused-items~  (&optional arg)
Read unused definitions of current file with ivy. To remove one item without exiting minibuffer use =C-c C-d=. To remove or backup batch of items, mark them. With optional prefix =arg= include only current file.
+ ~elisp-scan-query-remove-unused~
Remove or backup unused definitions.
+ ~elisp-scan-all-unused-defs~
Check every project file for unused definitions.

** Customizations

+ ~elisp-scan-archive-dir~
Where to write backup files.

+ ~elisp-scan-types-symbols~
Symbols which should always be checked.

+ ~elisp-scan-permanent-dirs~
In which directories always check usage.

